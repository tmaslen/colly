
{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "AWS CloudFormation sample template that contains a single Lambda function behind an API Gateway",

  "Parameters": {

    "LambdaARN": {
      "Type": "String",
      "Description": "The ARN of the Lambda you want to use"
    },

    "ApiName": {
      "Type": "String",
      "Description": "The name given to the API Gateway"
    },

    "ApiDescription": {
      "Type": "String",
      "Description": "The description given to the API Gateway"
    },

    "MessengerValidationToken": {
      "Type": "String",
      "Description": "The MESSENGER_VALIDATION_TOKEN value for working with the Facebook Messenger API",
      "Default": "xxx"
    },

    "PageAccessToken": {
      "Type": "String",
      "Description": "The PAGE_ACCESS_TOKEN value for working with the Facebook Messenger API",
      "Default": "xxx"
    }

  },

  "Resources": {

    "RestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {"Ref": "ApiName"},
        "Description": {"Ref": "ApiDescription"},
        "FailOnWarnings": true
      }
    },

    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Ref": "LambdaARN"},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "RestApi"}, "/*"]]}
      }
    },

    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["apigateway.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [{
          "PolicyName": "ApiGatewayLogsPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },

    "ApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {"Fn::GetAtt": ["ApiGatewayCloudWatchLogsRole", "Arn"] }
      }
    },

    "RestApiStage": {
      "DependsOn": ["ApiGatewayAccount"],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "ApiDeployment"},
        "MethodSettings": [{
          "DataTraceEnabled": true,
          "HttpMethod": "*",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }],
        "RestApiId": {"Ref": "RestApi"},
        "StageName": "Live",
        "Variables": {
          "MESSENGER_VALIDATION_TOKEN": {"Ref": "MessengerValidationToken"},
          "PAGE_ACCESS_TOKEN": {"Ref": "PageAccessToken"}
        }
      }
    },

    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["RestApiGET", "RestApiPOST"],
      "Properties": {
        "RestApiId": {"Ref": "RestApi"}
      }
    },

    "RestApiGET": {
      "DependsOn": "LambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join": ["",
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Ref": "LambdaARN"}, "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200,
            "ResponseTemplates": {
              "application/json": "$input.path('$')"
            }
          }],
          "RequestTemplates": {
            "application/json": {"Fn::Join": ["", [
              "#set($allParams = $input.params())\n",
              "{\n",
              "  \"body-json\": $input.json('$'),\n",
              "  \"params\" : {\n",
              "    #foreach($type in $allParams.keySet())\n",
              "      #set($params = $allParams.get($type))\n",
              "      \"$type\" : {\n",
              "        #foreach($paramName in $params.keySet())\n",
              "          \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n",
              "          #if($foreach.hasNext),#end\n",
              "        #end\n",
              "      }\n",
              "    #if($foreach.hasNext),#end\n",
              "    #end\n",
              "  },\n",
              "  \"stage-variables\": {\n",
              "    #foreach($key in $stageVariables.keySet())\n",
              "      \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n",
              "      #if($foreach.hasNext),#end\n",
              "    #end\n",
              "  },\n",
              "  \"context\" : {\n",
              "    \"account-id\" : \"$context.identity.accountId\",\n",
              "    \"api-id\" : \"$context.apiId\",\n",
              "    \"api-key\" : \"$context.identity.apiKey\",\n",
              "    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n",
              "    \"caller\" : \"$context.identity.caller\",\n",
              "    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n",
              "    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n",
              "    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n",
              "    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n",
              "    \"http-method\" : \"$context.httpMethod\",\n",
              "    \"stage\" : \"$context.stage\",\n",
              "    \"source-ip\" : \"$context.identity.sourceIp\",\n",
              "    \"user\" : \"$context.identity.user\",\n",
              "    \"user-agent\" : \"$context.identity.userAgent\",\n",
              "    \"user-arn\" : \"$context.identity.userArn\",\n",
              "    \"request-id\" : \"$context.requestId\",\n",
              "    \"resource-id\" : \"$context.resourceId\",\n",
              "    \"resource-path\" : \"$context.resourcePath\"\n",
              "  }\n",
              "}"
            ]]}
          }
        },
        "RequestParameters": {
          "method.request.querystring.name": false
        },
        "ResourceId": {"Fn::GetAtt": ["RestApi", "RootResourceId"] },
        "RestApiId": {"Ref": "RestApi"},
        "MethodResponses": [{
          "StatusCode": 200
        }]
      }
    },

    "RestApiPOST": {
      "DependsOn": "LambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join": ["",
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Ref": "LambdaARN"}, "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200,
            "ResponseTemplates": {
              "application/json": "$input.json('$.body')"
            }
          }],
          "RequestTemplates": {
            "application/json": {"Fn::Join": ["", [
              "#set($allParams = $input.params())\n",
              "{\n",
              "  \"body-json\": $input.json('$'),\n",
              "  \"params\" : {\n",
              "    #foreach($type in $allParams.keySet())\n",
              "      #set($params = $allParams.get($type))\n",
              "      \"$type\" : {\n",
              "        #foreach($paramName in $params.keySet())\n",
              "          \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n",
              "          #if($foreach.hasNext),#end\n",
              "        #end\n",
              "      }\n",
              "    #if($foreach.hasNext),#end\n",
              "    #end\n",
              "  },\n",
              "  \"stage-variables\": {\n",
              "    #foreach($key in $stageVariables.keySet())\n",
              "      \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n",
              "      #if($foreach.hasNext),#end\n",
              "    #end\n",
              "  },\n",
              "  \"context\" : {\n",
              "    \"account-id\" : \"$context.identity.accountId\",\n",
              "    \"api-id\" : \"$context.apiId\",\n",
              "    \"api-key\" : \"$context.identity.apiKey\",\n",
              "    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n",
              "    \"caller\" : \"$context.identity.caller\",\n",
              "    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n",
              "    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n",
              "    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n",
              "    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n",
              "    \"http-method\" : \"$context.httpMethod\",\n",
              "    \"stage\" : \"$context.stage\",\n",
              "    \"source-ip\" : \"$context.identity.sourceIp\",\n",
              "    \"user\" : \"$context.identity.user\",\n",
              "    \"user-agent\" : \"$context.identity.userAgent\",\n",
              "    \"user-arn\" : \"$context.identity.userArn\",\n",
              "    \"request-id\" : \"$context.requestId\",\n",
              "    \"resource-id\" : \"$context.resourceId\",\n",
              "    \"resource-path\" : \"$context.resourcePath\"\n",
              "  }\n",
              "}"
            ]]}
          }
        },
        "RequestParameters": {
          "method.request.querystring.name": false
        },
        "ResourceId": {"Fn::GetAtt": ["RestApi", "RootResourceId"] },
        "RestApiId": {"Ref": "RestApi"},
        "MethodResponses": [{
          "StatusCode": 200
        }]
      }
    }

  },

  "Outputs": {
    "RootUrl": {
      "Description": "Root URL of the API gateway",
      "Value": {"Fn::Join": ["", ["https://", {"Ref": "RestApi"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com/Live"]]}
    }
  }
}
